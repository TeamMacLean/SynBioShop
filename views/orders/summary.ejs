<% include ../head.ejs %>

<style>
  /* General Container and Spacing */
  .container {
    max-width: 1200px; /* Wider container for tables */
    margin: 0 auto;
    padding: 0 15px;
  }
  .spacer {
    margin: 30px 0;
    border: 0;
    height: 1px;
    background: #eee;
  }

  /* Export Widget */
  .export-widget {
    background-color: #f2f2f2;
    border: 1px solid #ccc;
    padding: 15px 20px;
    margin: 20px auto;
    display: flex;
    align-items: center;
    gap: 15px; /* Consistent spacing */
    flex-wrap: wrap;
    justify-content: center;
    border-radius: 8px;
  }
  .export-widget h2 {
    flex-basis: 100%;
    text-align: center;
    margin-bottom: 15px;
    font-size: 1.4rem;
    color: #333;
  }
  .export-widget label {
    font-weight: bold;
    font-size: 1rem;
    color: #555;
  }
  .export-widget input[type="date"] {
    font-size: 1rem;
    padding: 8px 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
    background-color: #fff;
  }
  .export-widget button {
    font-size: 1rem;
    padding: 8px 15px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  .export-widget button:hover:not(:disabled) {
    background-color: #0056b3;
  }
  .export-widget button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
  }
  #export-status {
    font-size: 0.9rem;
    color: #dc3545; /* Error color */
    margin-left: 10px;
    font-style: italic;
  }

  /* Table Styles */
  .table-wrapper {
    max-width: 100%; /* Allow table to take available width */
    overflow-x: auto; /* Enable horizontal scrolling on small screens */
    margin: 20px 0;
    padding: 0 15px; /* Match container padding */
    display: flex;
    justify-content: center;
  }
  table {
    width: 95%; /* Slightly less than max-width for padding */
    border-collapse: collapse;
    font-size: 0.95rem; /* Slightly smaller font for tables */
    box-shadow: 0 2px 5px rgba(0,0,0,0.1); /* Subtle shadow */
  }
  th, td {
    padding: 12px 15px; /* More padding */
    text-align: left;
    vertical-align: top;
    border: 1px solid #e0e0e0; /* Lighter border */
    white-space: nowrap; /* Prevent wrapping within cells */
    overflow: hidden;
    text-overflow: ellipsis;
  }
  th {
    background-color: #f8f8f8; /* Lighter header background */
    font-size: 1.1rem;
    font-weight: bold;
    color: #333;
  }
  /* Add some row striping for readability */
  tbody tr:nth-child(even) {
    background-color: #fdfdfd;
  }
  /* Highlight active row/cells if needed */
  .active {
    font-weight: bold;
    background-color: #e0e0e0 !important; /* Override for active pagination button */
  }

  /* List within table */
  td ul {
    margin: 0;
    padding-left: 20px; /* Indent list */
    list-style-type: disc; /* Standard list style */
  }
  td ul li {
    margin-bottom: 5px;
  }

  /* Pagination */
  .pagination {
    margin: 20px auto;
    padding: 10px;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 8px; /* Increased gap */
    align-items: center;
  }
  .pagination button, .pagination span {
    padding: 8px 12px;
    border: 1px solid #ccc;
    background-color: #fff;
    cursor: pointer;
    font-size: 1rem;
    border-radius: 4px;
    transition: all 0.2s ease;
  }
  .pagination button:hover:not(:disabled) {
    background-color: #e0e0e0;
    border-color: #bbb;
  }
  .pagination button:disabled {
    background-color: #f4f4f4;
    color: #999;
    cursor: default;
    border-color: #eee;
  }
  .pagination button.active {
    font-weight: bold;
    background-color: #007bff; /* Primary color */
    color: white;
    border-color: #007bff;
  }
  .pagination span { /* For ellipsis */
    font-size: 1.2rem;
    color: #555;
    padding: 8px 0; /* Adjust padding for span */
  }
  .pagination .previous, .pagination .next {
      font-size: 1.2rem; /* Make arrow buttons larger */
      padding: 8px 12px;
  }
</style>

<script>
  // Helper Functions for formatting (These are ONLY for client-side JS use, e.g., if you have client-side export or dynamic updates)
  function formatDate(dateStr) {
    if (!dateStr) return 'N/A';
    var d = new Date(dateStr);
    var day = d.getDate();
    var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    var month = monthNames[d.getMonth()];
    var year = d.getFullYear();
    return `${day} ${month} ${year}`;
  }

  function formatTotalCost(cost) {
    return Number(cost || 0).toFixed(2);
  }

  function countConstructs(items) {
    return items.reduce((sum, item) => sum + Number(item.quantity || 0), 0);
  }

  function formatForFilename(dateStr) {
    if (!dateStr) return 'unknown_date';
    var d = new Date(dateStr);
    var day = ('0' + d.getDate()).slice(-2);
    var month = ('0' + (d.getMonth() + 1)).slice(-2);
    var year = d.getFullYear();
    return `${day}-${month}-${year}`;
  }

  function formatFilename(startDateInput, endDateInput) {
    if (!startDateInput || !endDateInput) return 'orders_export.csv';
    return `costed_orders_from_${formatForFilename(startDateInput)}_to_${formatForFilename(endDateInput)}.csv`;
  }

  function updateExportButtonState() {
    const startDateInput = document.getElementById('start-date'); // Get element directly
    const endDateInput = document.getElementById('end-date');     // Get element directly
    const exportButton = document.getElementById('export-csv');
    const statusDiv = document.getElementById('export-status');

    statusDiv.textContent = '';

    // Check if elements exist before accessing .value
    if (!startDateInput || !endDateInput || !startDateInput.value || !endDateInput.value) {
      exportButton.disabled = true;
      statusDiv.textContent = 'Please select both start and end dates.';
      return;
    }

    const startDate = new Date(startDateInput.value);
    const endDate = new Date(endDateInput.value);
    endDate.setHours(23, 59, 59, 999);

    if (startDate > endDate) {
      exportButton.disabled = true;
      statusDiv.textContent = 'Start date must be before or equal to end date.';
      return;
    }

    exportButton.disabled = false;
  }

  // --- CRITICAL FIX: Wrap all DOM interaction code in DOMContentLoaded ---
  document.addEventListener("DOMContentLoaded", function() {
    // Event listeners for date inputs
    // Call updateExportButtonState in DOMContentLoaded so elements exist
    document.getElementById('start-date').addEventListener('change', updateExportButtonState);
    document.getElementById('end-date').addEventListener('change', updateExportButtonState);

    // Initial default dates and state update
    const today = new Date();
    const endDateInput = document.getElementById('end-date');
    const startDateInput = document.getElementById('start-date');

    if (endDateInput) endDateInput.value = today.toISOString().split("T")[0];
    const lastMonth = new Date(today);
    lastMonth.setMonth(today.getMonth() - 1);
    if (startDateInput) startDateInput.value = lastMonth.toISOString().split("T")[0];

    updateExportButtonState(); // Call after setting default values

    // Handle CSV Export Click
    document.getElementById('export-csv').addEventListener('click', async function() {
        // Ensure inputs are re-queried or valid (they are now in scope)
        const startDateValue = document.getElementById('start-date').value;
        const endDateValue = document.getElementById('end-date').value;
        const statusDiv = document.getElementById('export-status');

        this.disabled = true;
        statusDiv.textContent = 'Fetching data...';

        try {
            const response = await fetch(`/order/export?start=${startDateValue}&end=${endDateValue}`);
            if (!response.ok) {
                const errorBody = await response.text();
                console.error('DEBUG: HTTP error body:', errorBody);
                throw new Error(`HTTP error! status: ${response.status}. Body: ${errorBody.substring(0, 100)}...`);
            }

            const allOrders = await response.json();
            console.log('DEBUG: Fetched data (allOrders):', allOrders);

            if (!allOrders || allOrders.length === 0) {
                console.warn('DEBUG: No orders returned from export API.');
                statusDiv.textContent = 'No orders found for the selected date range.';
                statusDiv.style.color = 'orange';
                return;
            }

            const csvLines = ['Date,Total Cost,SynBio Constructs,Cost Code'];
            allOrders.forEach(function(order) {
                if (!order.costCode || order.costCode.toLowerCase() === 'n/a') return;

                const dateFormatted = formatDate(order.createdAt);
                const totalCostFormatted = formatTotalCost(order.totalCost);
                const constructCount = countConstructs(order.items);
                const constructText = `${constructCount} SynBio ${constructCount === 1 ? 'construct' : 'constructs'}`;
                const costCodeClean = order.costCode.replace(/-/g, '');

                csvLines.push([dateFormatted, totalCostFormatted, constructText, costCodeClean].join(','));
            });
            console.log('DEBUG: CSV lines generated. Count:', csvLines.length);

            const csvContent = csvLines.join('\n');
            console.log('DEBUG: CSV content generated. Length:', csvContent.length);

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            
            const downloadLink = document.createElement('a');
            downloadLink.href = url;
            downloadLink.download = formatFilename(startDateValue, endDateValue);
            document.body.appendChild(downloadLink);
            downloadLink.click();
            document.body.removeChild(downloadLink);
            URL.revokeObjectURL(url);

            statusDiv.textContent = 'Export successful!';
            statusDiv.style.color = 'green';

        } catch (err) {
            console.error('CSV Export Error:', err);
            console.error('DEBUG: Full error object:', err);
            statusDiv.textContent = `Error during export: ${err.message}`;
            statusDiv.style.color = 'red';
        } finally {
            this.disabled = false;
        }
    });
  }); // End DOMContentLoaded
</script>

<%
  const totalOrders = count || 0;
  const itemsPerPage = perPage || 50;
  const totalPages = Math.ceil(totalOrders / itemsPerPage);

  let currentPage = parseInt(page, 10) || 1;
  currentPage = Math.max(1, Math.min(currentPage, totalPages));

  const maxVisiblePages = 5;
  let pageButtons = [];

  if (totalPages <= maxVisiblePages) {
    for (let i = 1; i <= totalPages; i++) {
      pageButtons.push(i);
    }
  } else {
    let startPage = currentPage - Math.floor((maxVisiblePages - 1) / 2);
    let endPage = currentPage + Math.ceil((maxVisiblePages - 1) / 2);

    if (startPage < 1) {
        endPage += (1 - startPage);
        startPage = 1;
    }
    if (endPage > totalPages) {
        startPage -= (endPage - totalPages);
        endPage = totalPages;
    }
    startPage = Math.max(1, startPage);

    if (startPage > 1) {
        pageButtons.push(1);
        if (startPage > 2) {
            pageButtons.push('...');
        }
    }
    for (let i = startPage; i <= endPage; i++) {
        pageButtons.push(i);
    }
    if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
            pageButtons.push('...');
        }
        pageButtons.push(totalPages);
    }
  }
%>

<div class="container">
  <h1 class="center">Order Summary</h1>

  <div class="export-widget">
    <h2>Download all Orders with a Total Cost and Cost Code that have not been Cancelled</h2>  
    <label for="start-date">Start date:</label>
    <input type="date" id="start-date">
    <label for="end-date">End date:</label>
    <input type="date" id="end-date">
    <button id="export-csv">Export CSV</button>
    <div id="export-status"></div>
  </div>

    <div class="pagination">
    <button onclick="window.location='/order/summary?page=1'" <% if (currentPage <= 1) { %>disabled<% } %> class="previous">&lsaquo;&lsaquo;</button>
    <button onclick="window.location='/order/summary?page=<%- Math.max(1, currentPage - 1) %>'" <% if (currentPage <= 1) { %>disabled<% } %> class="previous">&lsaquo;</button>
    
    <% pageButtons.forEach(pageNumber => { %>
      <% if (pageNumber === '...') { %>
        <span>...</span>
      <% } else if (pageNumber === currentPage) { %>
        <button class="active" disabled><%- pageNumber %></button>
      <% } else { %>
        <button onclick="window.location='/order/summary?page=<%- pageNumber %>'" class="page-number"><%- pageNumber %></button>
      <% } %>
    <% }); %>
    
    <button onclick="window.location='/order/summary?page=<%- Math.min(totalPages, currentPage + 1) %>'" <% if (currentPage >= totalPages) { %>disabled<% } %> class="next">&rsaquo;</button>
    <button onclick="window.location='/order/summary?page=<%- totalPages %>'" <% if (currentPage >= totalPages) { %>disabled<% } %> class="next">&rsaquo;&rsaquo;</button>
  </div>


  <div class="table-wrapper">
    <table>
      <thead>
        <tr>
          <th style="width: 15%;">Created At</th>
          <th style="width: 15%;">Customer Name</th>
          <th style="width: 30%;">Items</th>
          <th style="width: 15%;">Total Cost</th>
          <th style="width: 20%;">Cost Code</th>
        </tr>
      </thead>
      <tbody>
        <% if (orders.length === 0) { %>
          <tr>
            <td colspan="5" class="center muted-text">No orders found matching your criteria.</td>
          </tr>
        <% } else { %>
          <% orders.forEach(order => { %>
            <tr>
              <td><%= formatDate(order.createdAt) %></td> 
              <td><%- order.fullName || order.username || 'N/A' %></td>
              <td>
                <ul>
                  <% if (order.items && order.items.length > 0) { %>
                    <% order.items.forEach(item => { %>
                      <% if (item && item.type && item.type.name) { %>
                        <li><%- item.type.name %> X<%- item.quantity || 0 %></li>
                      <% } else { %>
                        <li>Item type not found or deleted</li>
                      <% } %>
                    <% }) %>
                  <% } else { %>
                      <li>No item details available</li>
                  <% } %>
                </ul>
              </td>
              <td><%= formatTotalCost(order.totalCost) %></td> 
              <td><%- order.costCode || 'n/a' %></td>
            </tr>
          <% }) %>
        <% } %>
      </tbody>
    </table>
  </div>

  
  <div class="pagination">
    <button onclick="window.location='/order/summary?page=1'" <% if (currentPage <= 1) { %>disabled<% } %> class="previous">&lsaquo;&lsaquo;</button>
    <button onclick="window.location='/order/summary?page=<%- Math.max(1, currentPage - 1) %>'" <% if (currentPage <= 1) { %>disabled<% } %> class="previous">&lsaquo;</button>
    
    <% pageButtons.forEach(pageNumber => { %>
      <% if (pageNumber === '...') { %>
        <span>...</span>
      <% } else if (pageNumber === currentPage) { %>
        <button class="active" disabled><%- pageNumber %></button>
      <% } else { %>
        <button onclick="window.location='/order/summary?page=<%- pageNumber %>'" class="page-number"><%- pageNumber %></button>
      <% } %>
    <% }); %>
    
    <button onclick="window.location='/order/summary?page=<%- Math.min(totalPages, currentPage + 1) %>'" <% if (currentPage >= totalPages) { %>disabled<% } %> class="next">&rsaquo;</button>
    <button onclick="window.location='/order/summary?page=<%- totalPages %>'" <% if (currentPage >= totalPages) { %>disabled<% } %> class="next">&rsaquo;&rsaquo;</button>
  </div>


</div>

<% include ../foot.ejs %>