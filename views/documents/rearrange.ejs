<% include ../head.ejs %>
<% include ./sidebar.ejs %>

<div class="sidebar-push">
    <div class="container">
        <h2 class="center">Documents - Rearrange</h2>
        <div id="app"></div>
    </div>
</div>

<link href="/components/dragula.js/dist/dragula.min.css" rel="stylesheet">
<script src="/components/react/react.js"></script>
<script src="/components/react/react-dom.js"></script>
<script src="/components/dragula.js/dist/dragula.min.js"></script>
<script src="https://unpkg.com/babel-core@5.8.38/browser.min.js"></script>

<script type="text/babel">

    var subjects = JSON.parse('<%- JSON.stringify(subjects) %>');

    var Subject = React.createClass({
        render: function () {
            return (
                    <div className="subject">
                        <h2>{this.props.name}</h2>
                        <div data-id={this.props.id} className="dragg" data-type="subject"
                             data-root={this.props.isRoot} data-name={this.props.name}>
                            {
                                this.props.documents ? this.props.documents
                                        .sort(function (a, b) {
                                            return a.order - b.order
                                        })
                                        .map(function (item, i) {
                                            return (
                                                    <Document
                                                            id={item.id}
                                                            name={item.name}
                                                            key={item.id}
                                                    />
                                            )
                                        }, this) : null
                            }

                            {
                                this.props.subjects ? this.props.subjects
                                        .sort(function (a, b) {
                                            return a.order - b.order
                                        })
                                        .map(function (item, i) {
                                            return (
                                                    <Subject
                                                            id={item.id}
                                                            name={item.name}
                                                            quee={i}
                                                            subjects={item.subjects}
                                                            documents={item.documents}
                                                            key={item.id}
                                                            isRoot={false}
                                                    />
                                            )
                                        }, this) : null
                            }
                        </div>
                    </div>
            )
        }
    })

    var Document = React.createClass({
        render: function () {
            return (
                    <div data-id={this.props.id} data-type="document" data-name={this.props.name}>
                        {this.props.name}
                    </div>
            )
        }
    })

    var App = React.createClass({
        getInitialState: function () {
            return {
                subjects: this.props.subjects
            };
        },
        save: function () {

            var POST_URL = '/docs/rearrange';
            var dataJSON = JSON.stringify(this.state.subjects);

            $.post(POST_URL, {newOrder: dataJSON})
                    .done(function () {
                        console.log("second success");
                    })
                    .fail(function (resData) {
                        console.error("error", resData);
                    })


        },
        render: function () {
            var self = this;
            return (
                    <div>
                        <div className="dragg">
                            {
                                this.state.subjects ? this.state.subjects
                                        .sort(function (a, b) {
                                            return a.order - b.order
                                        })
                                        .map(function (item, i) {
                                            return (
                                                    <Subject
                                                            id={item.id}
                                                            name={item.name}
                                                            subjects={item.subjects}
                                                            documents={item.documents}
                                                            key={item.id}
                                                            isRoot={true}
                                                    />
                                            )
                                        }, this) : null
                            }
                        </div>
                        <button className="button primary" onClick={self.save}>Save Order</button>
                    </div>

            )
        },
        refresh: function () {
            var self = this;

            var digSubjects = function (subject) {
                var subjects = subject.find('*[data-type="subject"]').filter(function () {
//                    console.log($(this).parent().parent().data('id'), subject.data('id'))
                    return $(this).parent().parent().data('id') == subject.data('id');
                })

                var out = [];

                subjects.each(function (i) {
                    var el = $(this);
                    out.push({
                        id: el.data('id'),
                        name: el.data('name'),
                        order: i,
                        subjects: digSubjects(el),
                        documents: digDocuments(el)
                    })
                })
                return out
            };

            var digDocuments = function (subject) {
                var documents = subject.find('*[data-type="document"]').filter(function () {
                    return $(this).parent().data('id') == subject.data('id');
                })

                var out = [];

                documents.each(function (i) {
                    var el = $(this);
                    out.push({id: el.data('id'), name: el.data('name'), order: i});
                })
                return out;
            };

            var update = [];


            //GET ROOT SUBJECTS
            $('*[data-type="subject"][data-root="true"]').each(function (i) {
                update.push({
                    id: $(this).data('id'),
                    name: $(this).data('name'),
                    subjects: digSubjects($(this)),
                    documents: digDocuments($(this)),
                    order: i
                });
            });

            console.log(update);

            self.setState({subjects: update});
//            self.forceUpdate()
//            console.log('output', update);

        },
        componentDidMount: function () {
            var self = this;
            var dragger = dragula({
                isContainer: function (el) {
                    return el.classList.contains('dragg');
                }
            })
            dragger.on('dragend', function () {
                self.refresh();
            });
        }
    })

    console.log('init data', subjects);
    ReactDOM.render(
            <App subjects={subjects}/>, document.getElementById('app')
    );


</script>


<% include ../foot.ejs %>