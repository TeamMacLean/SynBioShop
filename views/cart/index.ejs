<% include ../head.ejs %>

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // --- Constants from server ---
    const displayPricing = <%- JSON.stringify(displayPricing) %>;
    const adminForceShowPricing = <%- JSON.stringify(adminForceShowPricing) %>;
    const isAdmin = <%- JSON.stringify(isAdmin) %>;
    const pricePerUnit = parseFloat('<%= pricePerUnit %>');

    // --- DOM Element Selectors ---
    const navCartCountElement = document.querySelector('.nav-cart .count'); // For header cart count

    /**
     * Calculates and updates the total quantity and total cost for the cart.
     * Also updates individual item prices if displayPricing is true.
     * CRITICAL: THIS FUNCTION DOES NOT TRIGGER RELOAD.
     */
    function updateTotals() {
      const currentQuantityElements = document.querySelectorAll('.item-quantity');
      let calculatedSumQuantity = 0;
      let calculatedSumCost = 0;

      currentQuantityElements.forEach((element) => {
        const quantity = parseInt(element.value || element.textContent, 10) || 0;
        calculatedSumQuantity += quantity;

        if (displayPricing) {
          const parentRow = element.closest('tr');
          if (parentRow) {
            const priceEl = parentRow.querySelector('[id^="price_"]');
            if (priceEl) {
              priceEl.textContent = (quantity * pricePerUnit).toFixed(2);
            }
          }
          calculatedSumCost += quantity * pricePerUnit;
        }
      });

      // Update Total Quantity display
      const totalQuantityEl = document.getElementById('totalQuantity');
      const totalQuantityInput = document.getElementById('totalQuantity-input');
      if (totalQuantityEl && totalQuantityInput) {
        totalQuantityEl.textContent = calculatedSumQuantity;
        totalQuantityInput.value = calculatedSumQuantity;
      }

      // Update Total Cost display if applicable
      if (displayPricing) {
        const totalCostEl = document.getElementById('totalCost');
        const totalCostInput = document.getElementById('totalCost-input');
        if (totalCostEl && totalCostInput) {
          totalCostEl.textContent = calculatedSumCost.toFixed(2);
          totalCostInput.value = calculatedSumCost.toFixed(2);
        }
      }

      // !!! IMPORTANT: REMOVED `location.reload()` FROM HERE !!!
      // `location.reload()` should ONLY be in `removedFromCart` handler.
    }

    // --- Event Listeners for Quantity Inputs (only editable ones) ---
    document.querySelectorAll('input.item-quantity').forEach((inputElement) => {
      const handleUpdate = () => {
        let currentValue = parseInt(inputElement.value, 10) || 1;
        if (currentValue < 1) {
          currentValue = 1;
        }
        if (!displayPricing && currentValue > 1) {
          currentValue = 1;
        }
        inputElement.value = currentValue;
        updateTotals();
      };

      inputElement.addEventListener('keyup', handleUpdate);
      inputElement.addEventListener('change', handleUpdate);
      inputElement.addEventListener('blur', handleUpdate);
    });

    // --- Event Listeners for Remove Item Buttons (Delegated for dynamic elements) ---
    $('body').on('click', 'a[name="removeItem"].areyousure', function(e) {
      e.preventDefault();
      const itemId = $(this).data('id');
      
      if (!confirm('Are you sure you want to remove this item from your cart?')) {
          return;
      }

      if (typeof socket !== 'undefined') {
        socket.emit('removeFromCart', { id: itemId });
      } else {
        console.warn('Socket.IO not available for removeFromCart. Cannot send removal request.');
        // Fallback for basic visual reset (though server state won't update).
        // If Socket.IO is the only path for server-side removal, this reload might be insufficient.
        location.reload(); 
      }
    });

    // --- Socket.IO Integration ---
    if (typeof socket !== 'undefined') {
      // Listener for 'removedFromCart' event from the server.
      socket.on('removedFromCart', function (data) {
        const row = document.querySelector('tr[data-id="' + data.id + '"]'); // Node v12 string concat
        if (row) {
          $(row).fadeOut(500, function () {
            this.remove(); // Remove the row from the DOM.
            const currentNavCartCount = parseInt(navCartCountElement.textContent, 10) || 0;
            navCartCountElement.textContent = Math.max(0, currentNavCartCount - 1);
            
            // AFTER removal and DOM update, check if cart is empty.
            const remainingItems = document.querySelectorAll('.item-quantity');
            if (remainingItems.length === 0) {
              location.reload(); // THIS IS THE ONLY PLACE reload() should occur for cart emptying.
            } else {
              updateTotals(); // Only update totals if items still exist.
            }
          });
        }
      });

      // Listener for client-side quantity changes on INPUTs, sends to server.
      $('input.item-quantity[name="itemQuantity"]').on('change keyup paste', function (e) {
          let val = parseInt($(this).val(), 10) || 1;
          val = Math.min(Math.max(val, 1), 25);
          $(this).val(val);
          socket.emit('changeQuantity', {
              id: $(this).data('id'),
              quantity: val
          });
      });

      // Handler for 'quantityUpdated' event from server.
      socket.on('quantityUpdated', function (data) {
          const quantityElement = document.getElementById('quantity_' + data.id); // Node v12 string concat
          
          if (quantityElement) {
              if (quantityElement.tagName === 'INPUT') {
                  quantityElement.value = data.quantity;
                  quantityElement.dispatchEvent(new Event('change'));
              } else if (quantityElement.tagName === 'SPAN') {
                  quantityElement.textContent = data.quantity;
                  updateTotals();
              }
          }
      });

    } else {
      console.warn('Socket.IO is not available. Real-time cart updates will not function.');
    }

    // --- Form Validation (Before Submission) ---
    const orderForm = document.getElementById('orderForm');
    if (orderForm) {
      orderForm.addEventListener('submit', function (event) {
        event.preventDefault();

        // Validate Signatory (if pricing is displayed)
        if (displayPricing) {
          const signatorySelect = document.getElementById('signatory');
          if (!signatorySelect || signatorySelect.value === '') {
            alert('Selection required: Please select a budget holder.');
            return;
          }
        }

        // Validate Consent Checkboxes
        const costConsentCheckbox = document.getElementById('cost-consent');
        if (costConsentCheckbox && !costConsentCheckbox.checked) {
            alert('You must confirm you have authority to spend.');
            return;
        }
        const nonCommercialConsentCheckbox = document.getElementById('non-commerical-consent');
        if (nonCommercialConsentCheckbox && !nonCommercialConsentCheckbox.checked) {
            alert('You must confirm the materials will be used for non-commercial purposes only.');
            return;
        }

        // Validate Item Quantities (ensure they are valid numbers and cart not empty)
        const allItemQuantities = document.querySelectorAll('.item-quantity');
        if (allItemQuantities.length === 0) {
          alert('System Error: Your cart is empty. Please add items before placing an order.');
          return;
        }
        for (let i = 0; i < allItemQuantities.length; i++) {
          const element = allItemQuantities[i];
          const quantity = parseInt(element.value || element.textContent, 10) || 0;
          if (isNaN(quantity) || quantity < 1) {
            alert('System Error: Item at row ' + (i + 1) + ' has an invalid quantity (' + (element.value || element.textContent) + '). Please ensure quantities are whole numbers of 1 or more.');
            if (element.tagName === 'INPUT') element.focus();
            return;
          }
        }

        orderForm.submit();
      });
    }

    // --- Initial Load ---
    // This will calculate totals on page load, but NOT reload if cart is empty.
    updateTotals(); 
  });
</script>

<div class="container">
    <h1 class="center">Shopping Basket</h1>

    <% /* Flash Messages Display */ %>
    <% if (typeof messages !== 'undefined') { %>
        <% if (messages.success && messages.success.length > 0) { %>
            <div class="flash-messages flash-success"><%= messages.success %></div>
        <% } %>
        <% if (messages.error && messages.error.length > 0) { %>
            <div class="flash-messages flash-error"><%= messages.error %></div>
        <% } %>
        <% if (messages.warning && messages.warning.length > 0) { %>
            <div class="flash-messages flash-warning"><%= messages.warning %></div>
        <% } %>
        <% if (messages.info && messages.info.length > 0) { %>
            <div class="flash-messages flash-info"><%= messages.info %></div>
        <% } %>
    <% } %>

    <% if(typeof cart !== 'undefined' && cart.items && cart.items.length > 0){ %>

        <% if (isAdmin) { %>
            <div style="margin-bottom: 2rem;">
                <a
                  href="<%- adminForceShowPricing ? '/cart' : '/cart?adminForceShowPricing=true' %>"
                  class="btn btn-link"
                >
                  <%- adminForceShowPricing ? 'Switch to Default View (Hide Pricing)' : 'Force Show Pricing' %>
                  (Admin-only feature)
                </a>
            </div>
        <% } %>

        <div class="form-group">
            <i>
                Order your items. A standard order item is 5Î¼L.
            </i>
        </div>
        <% if(displayPricing){ %>
            <div class="form-group"><i>For non-TSL staff, pricing is currently set at Â£<%= Number(pricePerUnit).toFixed(2) %> per item. Bespoke orders available through email request.</i></div>
        <% } %>

        <form id="orderForm" method="post" action="/cart/order">
            <input type="hidden" name="pricePerUnit" value="<%= pricePerUnit %>" />
            <table class="cart">
                <thead>
                    <tr>
                        <th>Item</th>
                        <th class="center">Quantity</th>
                        <% if (displayPricing){ %>
                            <th class="center">Price</th>
                        <% } %>
                        <th class="center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% cart.items.forEach(function(item, index){ %>
                    <tr data-id="<%- item.id %>">
                        <td data-th="Item"><a href="/premade/item/<%- item.type.id %>"><%- item.type.name %></a></td>
                        <td data-th="Quantity" class="center">
                            <% const itemQuantity = item.quantity || 1; %>
                            <% if (displayPricing){ %>
                                <!-- Use SPAN for display, HIDDEN INPUT for form submission -->
                                <span class="item-quantity" id="<%= 'quantity_' + index %>" data-id="<%- item.id %>"><%= itemQuantity %></span>
                                <input type="hidden" name="itemQuantity" value="<%= itemQuantity %>" />
                            <% } else { %>
                                <!-- Use INPUT for interactive quantity (max=1 enforced by min/max and JS) -->
                                <input
                                    type="number"
                                    class="item-quantity"
                                    value="<%= itemQuantity %>"
                                    name="itemQuantity"
                                    id="<%= 'quantity_' + index %>"
                                    min="1"
                                    max="1"
                                    data-id="<%- item.id %>"
                                    />
                            <% } %>
                        </td>
                        <% if (displayPricing){ %>
                            <td data-th="Price" class="center">
                                Â£<span id="<%= 'price_' + index %>"><%= (itemQuantity * pricePerUnit).toFixed(2) %></span>
                            </td>
                        <% } %>
                        <td data-th="Actions" class="center">
                            <a href="#" name="removeItem"
                                class="button danger outline icon areyousure" data-id="<%- item.id %>">
                                <span data-icon="&#xe019;"></span>
                            </a>
                        </td>
                    </tr>
                    <% }); %>
                </tbody>
                <tfoot>
                    <tr>
                        <td><b>TOTAL</b></td>
                        <td class="center">
                            <b>
                                <input type="hidden" id="totalQuantity-input" name="totalQuantity" />
                                <span id="totalQuantity"></span>
                            </b>
                        </td>
                        <% if (displayPricing){ %>
                            <td class="center">
                                <b>
                                    Â£
                                    <input type="hidden" id="totalCost-input" name="totalCost" />
                                    <span id="totalCost"></span>
                                </b>
                            </td>
                        <% } %>
                    </tr>
                </tfoot>
            </table>

            <% if (displayPricing){ %>
            <div class="form-group">
                <label for="costCode" class="form-label">Cost centre for charging:</label>
                <input
                  id="costCode"
                  name="costCode"
                  type="text"
                  minlength="11"
                  maxlength="11"
                  data-inputmask="'mask': '*****-***-*'"
                  class="uppercase"
                  required
                />
            </div>

            <div class="form-group">
                <label for="signatory" class="form-label">Select Budget Holder:</label>
                <select id="signatory" name="signatory" required>
                    <option value="" disabled selected>Select budget holder</option>
                    <option value='adriaens'>ADRIAENSSENS Evelien Adriaenssens [Food, Microbiome and Health (QIB)]</option>
                    <option value='ahnjarj'>AHN-JARVIS Jennifer Ahn-Jarvis [Food, Microbiome and Health (QIB)]</option>
                </select>
            </div>

            <div class="form-group">
                <input class="muted-text" id="cost-consent" type="checkbox" required>
                <label for="cost-consent" class="form-label muted-text">
                    By ticking this box I am confirming that I have authority to spend on the above cost centre. I accept that my 'New Order' email generated from this submission will also be sent to the selected budget holder.
                </label>
            </div>
            <% } %>

            <div class="form-group">
                <p><i>
                    TSL SynBio material supplied to TSL and JIC scientists is subject to a Material Transfer Agreement and must not be distributed or shared with any parties beyond TSL and JIC. Any third parties who request use of such material should be directed to TSL SynBio (please email <a href="mailto:Mark.Youles@tsl.ac.uk">Mark.Youles@tsl.ac.uk</a>).
                </i></p>
                <p><i>
                    Material supplied by TSL SynBio is for non-commercial research purposes only. If you wish to use supplied material for commercial purposes, please contact <a href="mailto:Mark.Youles@tsl.ac.uk">Mark.Youles@tsl.ac.uk</a> in order that an appropriate MTA can be drawn up.
                </i></p>
                <input class="muted-text" id="non-commerical-consent" type="checkbox" required>
                <label for="non-commerical-consent" class="form-label muted-text">
                    I have read the above and confirm that the materials on this order will be used for non-commercial research purposes only and will not be distributed to third parties.
                </label>
            </div>

            <div class="row">
                <div class="col12">
                    <div class="pull-right">
                        <button class="button success areyousure" id="placeOrderButton">Place Order</button>
                    </div>
                </div>
            </div>
        </form>

    <% } else { %>
        <h3 class="center">Your Shopping Basket is empty.</h3>
    <% } %>

</div>

<% include ../foot.ejs %>